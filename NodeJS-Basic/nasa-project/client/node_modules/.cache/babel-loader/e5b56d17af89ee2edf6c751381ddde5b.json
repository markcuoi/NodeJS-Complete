{"ast":null,"code":"const API_URL = \"http://localhost:8000\"; // Load planets and return as JSON.\n\nasync function httpGetPlanets() {\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json();\n}\n\nasync function httpGetLaunches() {\n  // TODO: Once API is ready.\n  const response = await fetch(`${API_URL}/launches`);\n  const fetchLaunches = await response.json();\n  return fetchLaunches.sort((a, b) => {\n    return a.flightNumber - b.flightNumber;\n  });\n} //passing data to body must be string, therefore using JSON.stringify\n//if we pass json, we need one header\n\n\nasync function httpSubmitLaunch(launch) {\n  try {\n    return await fetch(`${API_URL}/launches`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(launch)\n    });\n  } catch (err) {\n    return {\n      ok: false\n    };\n  }\n} // Delete launch with given ID.\n\n\nasync function httpAbortLaunch(id) {\n  try {\n    return await fetch(`${API_URL}/launches/${id}`, {\n      method: \"delete\"\n    });\n  } catch (err) {\n    console.log(err);\n    return {\n      ok: false\n    };\n  }\n}\n\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };","map":{"version":3,"sources":["/home/mark/Workmine/NodeJS-Complete/NodeJS-Basic/nasa-project/client/src/hooks/requests.js"],"names":["API_URL","httpGetPlanets","response","fetch","json","httpGetLaunches","fetchLaunches","sort","a","b","flightNumber","httpSubmitLaunch","launch","method","headers","body","JSON","stringify","err","ok","httpAbortLaunch","id","console","log"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAhB,C,CAEA;;AACA,eAAeC,cAAf,GAAgC;AAC9B,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,UAAZ,CAA5B;AACA,SAAO,MAAME,QAAQ,CAACE,IAAT,EAAb;AACD;;AAED,eAAeC,eAAf,GAAiC;AAC/B;AACA,QAAMH,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEH,OAAQ,WAAZ,CAA5B;AACA,QAAMM,aAAa,GAAG,MAAMJ,QAAQ,CAACE,IAAT,EAA5B;AACA,SAAOE,aAAa,CAACC,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAClC,WAAOD,CAAC,CAACE,YAAF,GAAiBD,CAAC,CAACC,YAA1B;AACD,GAFM,CAAP;AAGD,C,CAED;AACA;;;AACA,eAAeC,gBAAf,CAAgCC,MAAhC,EAAwC;AACtC,MAAI;AACF,WAAO,MAAMT,KAAK,CAAE,GAAEH,OAAQ,WAAZ,EAAwB;AACxCa,MAAAA,MAAM,EAAE,MADgC;AAExCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF+B;AAKxCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf;AALkC,KAAxB,CAAlB;AAOD,GARD,CAQE,OAAOM,GAAP,EAAY;AACZ,WAAO;AACLC,MAAAA,EAAE,EAAE;AADC,KAAP;AAGD;AACF,C,CAED;;;AACA,eAAeC,eAAf,CAA+BC,EAA/B,EAAmC;AACjC,MAAI;AACF,WAAO,MAAMlB,KAAK,CAAE,GAAEH,OAAQ,aAAYqB,EAAG,EAA3B,EAA8B;AAC9CR,MAAAA,MAAM,EAAE;AADsC,KAA9B,CAAlB;AAGD,GAJD,CAIE,OAAOK,GAAP,EAAY;AACZI,IAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AACA,WAAO;AACLC,MAAAA,EAAE,EAAE;AADC,KAAP;AAGD;AACF;;AAED,SAASlB,cAAT,EAAyBI,eAAzB,EAA0CM,gBAA1C,EAA4DS,eAA5D","sourcesContent":["const API_URL = \"http://localhost:8000\";\n\n// Load planets and return as JSON.\nasync function httpGetPlanets() {\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json();\n}\n\nasync function httpGetLaunches() {\n  // TODO: Once API is ready.\n  const response = await fetch(`${API_URL}/launches`);\n  const fetchLaunches = await response.json();\n  return fetchLaunches.sort((a, b) => {\n    return a.flightNumber - b.flightNumber;\n  });\n}\n\n//passing data to body must be string, therefore using JSON.stringify\n//if we pass json, we need one header\nasync function httpSubmitLaunch(launch) {\n  try {\n    return await fetch(`${API_URL}/launches`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(launch),\n    });\n  } catch (err) {\n    return {\n      ok: false,\n    };\n  }\n}\n\n// Delete launch with given ID.\nasync function httpAbortLaunch(id) {\n  try {\n    return await fetch(`${API_URL}/launches/${id}`, {\n      method: \"delete\",\n    });\n  } catch (err) {\n    console.log(err);\n    return {\n      ok: false,\n    };\n  }\n}\n\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };\n"]},"metadata":{},"sourceType":"module"}