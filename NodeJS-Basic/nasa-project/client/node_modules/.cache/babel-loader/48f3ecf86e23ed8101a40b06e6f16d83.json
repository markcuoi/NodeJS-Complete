{"ast":null,"code":"import _regeneratorRuntime from\"/home/mark/Workmine/NodeJS-Complete/NodeJS-Basic/nasa-project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/mark/Workmine/NodeJS-Complete/NodeJS-Basic/nasa-project/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var API_URL=\"http://localhost:8000\";// Load planets and return as JSON.\nfunction httpGetPlanets(){return _httpGetPlanets.apply(this,arguments);}function _httpGetPlanets(){_httpGetPlanets=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"\".concat(API_URL,\"/planets\"));case 2:response=_context.sent;_context.next=5;return response.json();case 5:return _context.abrupt(\"return\",_context.sent);case 6:case\"end\":return _context.stop();}}},_callee);}));return _httpGetPlanets.apply(this,arguments);}function httpGetLaunches(){return _httpGetLaunches.apply(this,arguments);}//passing data to body must be string, therefore using JSON.stringify\n//if we pass json, we need one header\nfunction _httpGetLaunches(){_httpGetLaunches=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var response,fetchLaunches;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch(\"\".concat(API_URL,\"/launches\"));case 2:response=_context2.sent;_context2.next=5;return response.json();case 5:fetchLaunches=_context2.sent;return _context2.abrupt(\"return\",fetchLaunches.sort(function(a,b){return a.flightNumber-b.flightNumber;}));case 7:case\"end\":return _context2.stop();}}},_callee2);}));return _httpGetLaunches.apply(this,arguments);}function httpSubmitLaunch(_x){return _httpSubmitLaunch.apply(this,arguments);}function _httpSubmitLaunch(){_httpSubmitLaunch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(launch){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return fetch(\"\".concat(API_URL,\"/launches\"),{method:\"post\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(launch)});case 3:return _context3.abrupt(\"return\",_context3.sent);case 6:_context3.prev=6;_context3.t0=_context3[\"catch\"](0);return _context3.abrupt(\"return\",{ok:false});case 9:case\"end\":return _context3.stop();}}},_callee3,null,[[0,6]]);}));return _httpSubmitLaunch.apply(this,arguments);}function httpAbortLaunch(_x2){return _httpAbortLaunch.apply(this,arguments);}function _httpAbortLaunch(){_httpAbortLaunch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_context4.next=3;return fetch(\"\".concat(API_URL,\"/launch/\").concat(id),{method:\"delete\"});case 3:return _context4.abrupt(\"return\",_context4.sent);case 6:_context4.prev=6;_context4.t0=_context4[\"catch\"](0);return _context4.abrupt(\"return\",{ok:false});case 9:case\"end\":return _context4.stop();}}},_callee4,null,[[0,6]]);}));return _httpAbortLaunch.apply(this,arguments);}export{httpGetPlanets,httpGetLaunches,httpSubmitLaunch,httpAbortLaunch};","map":{"version":3,"sources":["/home/mark/Workmine/NodeJS-Complete/NodeJS-Basic/nasa-project/client/src/hooks/requests.js"],"names":["API_URL","httpGetPlanets","fetch","response","json","httpGetLaunches","fetchLaunches","sort","a","b","flightNumber","httpSubmitLaunch","launch","method","headers","body","JSON","stringify","ok","httpAbortLaunch","id"],"mappings":"mXAAA,GAAMA,CAAAA,OAAO,CAAG,uBAAhB,CAEA;QACeC,CAAAA,c,oJAAf,sKACyBC,CAAAA,KAAK,WAAIF,OAAJ,aAD9B,QACQG,QADR,qCAEeA,CAAAA,QAAQ,CAACC,IAAT,EAFf,6G,yDAKeC,CAAAA,e,kDASf;AACA;qGAVA,0LAEyBH,CAAAA,KAAK,WAAIF,OAAJ,cAF9B,QAEQG,QAFR,uCAG8BA,CAAAA,QAAQ,CAACC,IAAT,EAH9B,QAGQE,aAHR,iDAISA,aAAa,CAACC,IAAd,CAAmB,SAACC,CAAD,CAAIC,CAAJ,CAAU,CAClC,MAAOD,CAAAA,CAAC,CAACE,YAAF,CAAiBD,CAAC,CAACC,YAA1B,CACD,CAFM,CAJT,0D,0DAWeC,CAAAA,gB,4JAAf,kBAAgCC,MAAhC,8JAEiBV,CAAAA,KAAK,WAAIF,OAAJ,cAAwB,CACxCa,MAAM,CAAE,MADgC,CAExCC,OAAO,CAAE,CACP,eAAgB,kBADT,CAF+B,CAKxCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeL,MAAf,CALkC,CAAxB,CAFtB,qJAUW,CACLM,EAAE,CAAE,KADC,CAVX,uE,2DAeeC,CAAAA,e,0JAAf,kBAA+BC,EAA/B,8JAEiBlB,CAAAA,KAAK,WAAIF,OAAJ,oBAAsBoB,EAAtB,EAA4B,CAC5CP,MAAM,CAAE,QADoC,CAA5B,CAFtB,qJAMW,CACLK,EAAE,CAAE,KADC,CANX,uE,kDAYA,OAASjB,cAAT,CAAyBI,eAAzB,CAA0CM,gBAA1C,CAA4DQ,eAA5D","sourcesContent":["const API_URL = \"http://localhost:8000\";\n\n// Load planets and return as JSON.\nasync function httpGetPlanets() {\n  const response = await fetch(`${API_URL}/planets`);\n  return await response.json();\n}\n\nasync function httpGetLaunches() {\n  // TODO: Once API is ready.\n  const response = await fetch(`${API_URL}/launches`);\n  const fetchLaunches = await response.json();\n  return fetchLaunches.sort((a, b) => {\n    return a.flightNumber - b.flightNumber;\n  });\n}\n\n//passing data to body must be string, therefore using JSON.stringify\n//if we pass json, we need one header\nasync function httpSubmitLaunch(launch) {\n  try {\n    return await fetch(`${API_URL}/launches`, {\n      method: \"post\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(launch),\n    });\n  } catch (err) {\n    return {\n      ok: false,\n    };\n  }\n}\nasync function httpAbortLaunch(id) {\n  try {\n    return await fetch(`${API_URL}/launch/${id}`, {\n      method: \"delete\",\n    });\n  } catch (err) {\n    return {\n      ok: false,\n    };\n  }\n}\n\nexport { httpGetPlanets, httpGetLaunches, httpSubmitLaunch, httpAbortLaunch };\n"]},"metadata":{},"sourceType":"module"}